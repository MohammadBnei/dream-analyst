// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid()) @map("id")
  username     String  @unique
  email        String  @unique
  passwordHash String  @map("password_hash")
  dreams       Dream[]
  chatMessages DreamChat[] 

  @@map("user")
}

model Dream {
  id             String      @id @default(uuid())
  userId         String      @map("user_id")
  user           User?       @relation(fields: [userId], references: [id])
  rawText        String      @map("raw_text")
  analysisText   String?     @map("analysis_text")
  interpretation String?
  status         DreamStatus @default(PENDING_ANALYSIS)
  tags           Json?
  dreamDate      DateTime    @default(now()) @map("dream_date") // New field for the actual dream date
  promptType     String?     @default("jungian") // Added promptType field
  chatMessages   DreamChat[] // Link to new chat messages
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @default(now()) @updatedAt @map("updated_at")

  @@map("dreams")
}

// New model for chat messages related to a dream
model DreamChat {
  id        String   @id @default(uuid())
  dreamId   String   @map("dream_id")
  dream     Dream    @relation(fields: [dreamId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  role      String   // 'user' or 'assistant'
  content   String
  promptType String? // Added promptType to DreamChat
  createdAt DateTime @default(now()) @map("created_at")

  @@map("dream_chat")
}

enum DreamStatus {
  PENDING_ANALYSIS
  COMPLETED
  ANALYSIS_FAILED
}
